# tasks.py
import time
import random
import re
import os
import asyncio
from typing import Any, Dict, Optional
from browser_manager import BrowserManager

# Initialize browser manager (should be initialized once at application start)
_browser_manager = None

async def init_browser_manager(headless=False, user_data_dir=None, args=None):
    global _browser_manager
    _browser_manager = BrowserManager()
    await _browser_manager.init_browser(headless=headless, user_data_dir=user_data_dir, args=args)

async def close_browser_manager():
    global _browser_manager
    if _browser_manager:
        await _browser_manager.close_browser()
        _browser_manager = None

# Helper function for browser operations
async def _run_browser_task(coro_func, *args, **kwargs):
    if _browser_manager is None:
        raise RuntimeError("Browser manager not initialized")
    return await coro_func(*args, **kwargs)

# Task implementations
def sleep(seconds):
    time.sleep(seconds)
    return f"–ü–∞—É–∑–∞ {seconds} —Å–µ–∫."

def log_registration_result(status):
    print(f"–°—Ç–∞—Ç—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {status}")
    return f"–õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {status}"

def extract_code_from_text(text):
    match = re.search(r"\b\d{6}\b", text)
    return match.group(0) if match else "–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω"

def wait_email(timeout=30):
    time.sleep(timeout)
    return f"–û–∂–∏–¥–∞–Ω–∏–µ –ø–∏—Å—å–º–∞: {timeout} —Å–µ–∫."

async def wait_for(selector, timeout=5000):
    await _run_browser_task(_browser_manager.wait_for, selector, timeout)
    return f"–î–æ–∂–¥–∞–ª—Å—è —ç–ª–µ–º–µ–Ω—Ç–∞ {selector}"

async def wait_captcha_frame():
    await _run_browser_task(_browser_manager.wait_captcha_frame)
    return "–ö–∞–ø—á–∞ —Ñ—Ä–µ–π–º –∑–∞–≥—Ä—É–∂–µ–Ω"

async def upload_file(selector, filepath):
    await _run_browser_task(_browser_manager.upload_file, selector, filepath)
    return f"–§–∞–π–ª {filepath} –∑–∞–≥—Ä—É–∂–µ–Ω –≤ {selector}"

async def uncheck_checkbox(selector):
    await _run_browser_task(_browser_manager.uncheck_checkbox, selector)
    return f"–ß–µ–∫–±–æ–∫—Å {selector} —Å–Ω—è—Ç"

async def switch_tab(index):
    await _run_browser_task(_browser_manager.switch_tab, index)
    return f"–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ –≤–∫–ª–∞–¥–∫—É {index}"

async def submit_form(selector):
    await _run_browser_task(_browser_manager.submit_form, selector)
    return f"–û—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ä–º—É {selector}"

async def set_user_agent(user_agent):
    await _run_browser_task(_browser_manager.set_user_agent, user_agent)
    return f"User-Agent —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {user_agent}"

async def select_dropdown(selector, value):
    await _run_browser_task(_browser_manager.select_dropdown, selector, value)
    return f"–í—ã–±—Ä–∞–Ω –ø—É–Ω–∫—Ç {value} –∏–∑ {selector}"

async def scroll_to(selector):
    await _run_browser_task(_browser_manager.scroll_to, selector)
    return f"–ü—Ä–æ—Å–∫—Ä–æ–ª–ª–∏–ª –¥–æ {selector}"

async def screenshot(filename="screenshot.png"):
    await _run_browser_task(_browser_manager.screenshot, filename)
    return f"–°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}"

async def save_session(path="session.json"):
    await _run_browser_task(_browser_manager.save_session, path)
    return "–°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞"

async def refresh():
    await _run_browser_task(_browser_manager.refresh)
    return "–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞"

def random_delay(min_sec=1, max_sec=5):
    duration = random.uniform(min_sec, max_sec)
    time.sleep(duration)
    return f"–°–ª—É—á–∞–π–Ω–∞—è –ø–∞—É–∑–∞: {round(duration, 2)} —Å–µ–∫."

async def paste_code(selector, code):
    await _run_browser_task(_browser_manager.fill, selector, code)
    return f"–í—Å—Ç–∞–≤–ª–µ–Ω –∫–æ–¥ {code} –≤ {selector}"

async def open_url(url):
    await _run_browser_task(_browser_manager.open_url, url)
    return f"–û—Ç–∫—Ä—ã–ª —Å–∞–π—Ç {url}"

async def load_session(path="session.json"):
    await _run_browser_task(_browser_manager.load_session, path)
    return "–°–µ—Å—Å–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞"

async def hover(selector):
    await _run_browser_task(_browser_manager.hover, selector)
    return f"–ù–∞–≤–µ–ª –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç {selector}"

async def go_back():
    await _run_browser_task(_browser_manager.go_back)
    return "–ù–∞–∑–∞–¥ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏"

async def get_inner_text(selector):
    text = await _run_browser_task(_browser_manager.get_inner_text, selector)
    return text

async def fill(selector, text):
    await _run_browser_task(_browser_manager.fill, selector, text)
    return f"–ó–∞–ø–æ–ª–Ω–∏–ª {selector} —Ç–µ–∫—Å—Ç–æ–º: {text}"

async def click(selector):
    await _run_browser_task(_browser_manager.click, selector)
    return f"–ö–ª–∏–∫–Ω—É–ª –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É {selector}"

async def clear_cookies():
    await _run_browser_task(_browser_manager.clear_cookies)
    return "–ö—É–∫–∏ –æ—á–∏—â–µ–Ω—ã"

async def check_text(text):
    found = await _run_browser_task(_browser_manager.check_text, text)
    return f"–¢–µ–∫—Å—Ç {'–Ω–∞–π–¥–µ–Ω' if found else '–Ω–µ –Ω–∞–π–¥–µ–Ω'}: {text}"

async def check_element(selector):
    result = await _run_browser_task(_browser_manager.check_element, selector)
    return f"–≠–ª–µ–º–µ–Ω—Ç {'–Ω–∞–π–¥–µ–Ω' if result else '–Ω–µ –Ω–∞–π–¥–µ–Ω'}: {selector}"

async def check_checkbox(selector):
    await _run_browser_task(_browser_manager.check_checkbox, selector)
    return f"–ß–µ–∫–±–æ–∫—Å {selector} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

async def confirm_registration():
    await _run_browser_task(_browser_manager.confirm_registration)
    return "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞"

async def click_captcha_checkbox():
    await _run_browser_task(_browser_manager.click_captcha_checkbox)
    return "–ö–ª–∏–∫ –ø–æ –∫–∞–ø—á–∞-—á–µ–∫–±–æ–∫—Å—É"

async def check_element_contains_text(selector, text):
    result = await _run_browser_task(_browser_manager.check_element_contains_text, selector, text)
    return f"–¢–µ–∫—Å—Ç {'–Ω–∞–π–¥–µ–Ω' if result else '–Ω–µ –Ω–∞–π–¥–µ–Ω'} –≤ {selector}"

async def click_link_with_text(text):
    await _run_browser_task(_browser_manager.click_link_with_text, text)
    return f"–ö–ª–∏–∫ –ø–æ —Å—Å—ã–ª–∫–µ —Å —Ç–µ–∫—Å—Ç–æ–º: {text}"

async def detect_captcha_type():
    return await _run_browser_task(_browser_manager.detect_captcha_type)

async def download_file(url):
    await _run_browser_task(_browser_manager.download_file, url)
    return f"–§–∞–π–ª —Å–∫–∞—á–∞–Ω —Å {url}"

async def extract_emails_from_page():
    emails = await _run_browser_task(_browser_manager.extract_emails_from_page)
    return emails

async def get_links_from_selector(selector):
    links = await _run_browser_task(_browser_manager.get_links_from_selector, selector)
    return links

async def move_mouse(x, y):
    await _run_browser_task(_browser_manager.move_mouse, x, y)
    return f"–ú—ã—à—å –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã ({x}, {y})"

async def press_enter():
    await _run_browser_task(_browser_manager.press_enter)
    return "–ù–∞–∂–∞–ª Enter"

def read_paths_from_file(params):
    filepath = params.get("file")
    count = params.get("count", None)

    if not filepath:
        raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É")

    with open(filepath, "r", encoding="utf-8") as f:
        lines = [line.strip() for line in f if line.strip()]

    if count:
        lines = lines[: int(count)]

    return {"status": "ok", "paths": lines}

async def run_multiple_sessions_from_file(params):
    filepath = params.get("file")
    count = params.get("count", 1)

    result = read_paths_from_file({"file": filepath, "count": count})
    paths = result["paths"]

    results = []
    for idx, path in enumerate(paths):
        session_result = await setup_octo_session_from_folder(
            {"folder_path": path, "profile_index": idx}
        )
        results.append(session_result)

    return {"status": "ok", "results": results}

async def setup_octo_session_from_folder(params):
    folder_path = params.get("folder_path")
    profile_index = params.get("profile_index", 0)

    print(f"üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Octo-–ø—Ä–æ—Ñ–∏–ª—è #{profile_index + 1} –∏–∑ –ø–∞–ø–∫–∏: {folder_path}")

    if not folder_path or not os.path.exists(folder_path):
        raise FileNotFoundError(f"–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {folder_path}")

    cookies_file = os.path.join(folder_path, "cookies.json")
    if not os.path.isfile(cookies_file):
        raise FileNotFoundError(f"–§–∞–π–ª cookies.json –Ω–µ –Ω–∞–π–¥–µ–Ω –≤: {folder_path}")

    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –∫—É–∫–∏: {cookies_file}")
    print(f"üöÄ –ü—Ä–æ—Ñ–∏–ª—å Octo #{profile_index + 1} —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")

    return {"status": "ok", "folder": folder_path, "profile": profile_index + 1}

async def solve_best_captcha(params: Dict[str, Any]) -> Dict[str, Any]:
    user_id = params.get("user_id", "default")

    if not can_use_captcha(user_id):
        raise Exception("üö´ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∫–∞–ø—á–∞-—Ä–µ—à–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

    api_keys = load_api_keys()
    captcha_type = "capmonster"

    result = await go(captcha_type, api_keys)

    if result:
        increment_user_usage(user_id)

    return {"status": "ok", "result": result}

async def go(captcha_type: Optional[str], api_keys: Dict[str, str]) -> Optional[bool]:
    if captcha_type is None:
        print("–ö–∞–ø—á–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞.")
        return False

    captcha_solvers = {
        "2captcha": _browser_manager.solve_captcha_2captcha,
        "capmonster": _browser_manager.solve_captcha_capmonster,
        "anticaptcha": _browser_manager.solve_captcha_anticaptcha,
        "rucaptcha": _browser_manager.solve_captcha_rucaptcha,
    }

    solve_func = captcha_solvers.get(captcha_type)

    if solve_func is None:
        print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–∞–ø—á–∏: {captcha_type}.")
        return False

    api_key = api_keys.get(captcha_type)
    if api_key:
        return await solve_func(api_key)
    return False

async def solve_captcha_2captcha(api_key):
    await _run_browser_task(_browser_manager.solve_captcha_2captcha, api_key)
    return "–ö–∞–ø—á–∞ —Ä–µ—à–µ–Ω–∞ —á–µ—Ä–µ–∑ 2Captcha"

async def solve_captcha_anticaptcha(api_key):
    await _run_browser_task(_browser_manager.solve_captcha_anticaptcha, api_key)
    return "–ö–∞–ø—á–∞ —Ä–µ—à–µ–Ω–∞ —á–µ—Ä–µ–∑ Anti-Captcha"

async def solve_captcha_capmonster(api_key):
    await _run_browser_task(_browser_manager.solve_captcha_capmonster, api_key)
    return "–ö–∞–ø—á–∞ —Ä–µ—à–µ–Ω–∞ —á–µ—Ä–µ–∑ CapMonster"

async def solve_captcha_rucaptcha(api_key):
    await _run_browser_task(_browser_manager.solve_captcha_rucaptcha, api_key)
    return "–ö–∞–ø—á–∞ —Ä–µ—à–µ–Ω–∞ —á–µ—Ä–µ–∑ RuCaptcha"

async def type_slow(selector, text, delay=0.1):
    await _run_browser_task(_browser_manager.type_slow, selector, text, delay)
    return f"–ú–µ–¥–ª–µ–Ω–Ω–æ –≤–≤—ë–ª —Ç–µ–∫—Å—Ç '{text}' –≤ {selector}"

import os
import random
import re
import time
import json
from typing import Any, Dict, List

from om11.agent.task.captcha_manager import CaptchaSolver


class Tasks:
    def __init__(self, browser_manager, captcha_service):
        self.browser = browser_manager
        self.captcha_service = captcha_service

    # Non-browser tasks
    def sleep(self, seconds: float) -> str:
        time.sleep(seconds)
        return f"–ü–∞—É–∑–∞ {seconds} —Å–µ–∫."

    def log_registration_result(self, status: str) -> str:
        print(f"–°—Ç–∞—Ç—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {status}")
        return f"–õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {status}"

    def extract_code_from_text(self, text: str) -> str:
        match = re.search(r"\b\d{6}\b", text)
        return match.group(0) if match else "–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω"

    def wait_email(self, timeout: int = 30) -> str:
        time.sleep(timeout)
        return f"–û–∂–∏–¥–∞–Ω–∏–µ –ø–∏—Å—å–º–∞: {timeout} —Å–µ–∫."

    def random_delay(self, min_sec: float = 1, max_sec: float = 5) -> str:
        duration = random.uniform(min_sec, max_sec)
        time.sleep(duration)
        return f"–°–ª—É—á–∞–π–Ω–∞—è –ø–∞—É–∑–∞: {round(duration, 2)} —Å–µ–∫."

    # Browser interaction tasks
    async def wait_for(self, selector: str, timeout: int = 5000) -> str:
        await self.browser.wait_for(selector, timeout)
        return f"–î–æ–∂–¥–∞–ª—Å—è —ç–ª–µ–º–µ–Ω—Ç–∞ {selector}"

    async def wait_captcha_frame(self) -> str:
        await self.browser.wait_captcha_frame()
        return "–ö–∞–ø—á–∞ —Ñ—Ä–µ–π–º –∑–∞–≥—Ä—É–∂–µ–Ω"

    async def upload_file(self, selector: str, filepath: str) -> str:
        await self.browser.upload_file(selector, filepath)
        return f"–§–∞–π–ª {filepath} –∑–∞–≥—Ä—É–∂–µ–Ω –≤ {selector}"

    async def uncheck_checkbox(self, selector: str) -> str:
        await self.browser.uncheck_checkbox(selector)
        return f"–ß–µ–∫–±–æ–∫—Å {selector} —Å–Ω—è—Ç"

    async def switch_tab(self, index: int) -> str:
        await self.browser.switch_tab(index)
        return f"–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ –≤–∫–ª–∞–¥–∫—É {index}"

    async def submit_form(self, selector: str) -> str:
        await self.browser.submit_form(selector)
        return f"–û—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ä–º—É {selector}"

    async def set_user_agent(self, user_agent: str) -> str:
        await self.browser.set_user_agent(user_agent)
        return f"User-Agent —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {user_agent}"

    async def select_dropdown(self, selector: str, value: str) -> str:
        await self.browser.select_dropdown(selector, value)
        return f"–í—ã–±—Ä–∞–Ω –ø—É–Ω–∫—Ç {value} –∏–∑ {selector}"

    async def scroll_to(self, selector: str) -> str:
        await self.browser.scroll_to(selector)
        return f"–ü—Ä–æ—Å–∫—Ä–æ–ª–ª–∏–ª –¥–æ {selector}"

    async def screenshot(self, filename: str = "screenshot.png") -> str:
        await self.browser.screenshot(filename)
        return f"–°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}"

    async def save_session(self, path: str = "session.json") -> str:
        await self.browser.save_session(path)
        return "–°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞"

    async def refresh(self) -> str:
        await self.browser.refresh()
        return "–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞"

    async def paste_code(self, selector: str, code: str) -> str:
        await self.browser.fill(selector, code)
        return f"–í—Å—Ç–∞–≤–ª–µ–Ω –∫–æ–¥ {code} –≤ {selector}"

    async def open_url(self, url: str) -> str:
        await self.browser.open_url(url)
        return f"–û—Ç–∫—Ä—ã–ª —Å–∞–π—Ç {url}"

    async def load_session(self, path: str = "session.json") -> str:
        await self.browser.load_session(path)
        return "–°–µ—Å—Å–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞"

    async def hover(self, selector: str) -> str:
        await self.browser.hover(selector)
        return f"–ù–∞–≤–µ–ª –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç {selector}"

    async def go_back(self) -> str:
        await self.browser.go_back()
        return "–ù–∞–∑–∞–¥ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏"

    async def get_inner_text(self, selector: str) -> str:
        return await self.browser.get_inner_text(selector)

    async def fill(self, selector: str, text: str) -> str:
        await self.browser.fill(selector, text)
        return f"–ó–∞–ø–æ–ª–Ω–∏–ª {selector} —Ç–µ–∫—Å—Ç–æ–º: {text}"

    async def click(self, selector: str) -> str:
        await self.browser.click(selector)
        return f"–ö–ª–∏–∫–Ω—É–ª –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É {selector}"

    async def clear_cookies(self) -> str:
        await self.browser.clear_cookies()
        return "–ö—É–∫–∏ –æ—á–∏—â–µ–Ω—ã"

    async def check_text(self, text: str) -> str:
        found = await self.browser.check_text(text)
        return f"–¢–µ–∫—Å—Ç {'–Ω–∞–π–¥–µ–Ω' if found else '–Ω–µ –Ω–∞–π–¥–µ–Ω'}: {text}"

    async def check_element(self, selector: str) -> str:
        result = await self.browser.check_element(selector)
        return f"–≠–ª–µ–º–µ–Ω—Ç {'–Ω–∞–π–¥–µ–Ω' if result else '–Ω–µ –Ω–∞–π–¥–µ–Ω'}: {selector}"

    async def check_checkbox(self, selector: str) -> str:
        await self.browser.check_checkbox(selector)
        return f"–ß–µ–∫–±–æ–∫—Å {selector} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

    async def confirm_registration(self) -> str:
        await self.browser.confirm_registration()
        return "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞"

    async def click_captcha_checkbox(self) -> str:
        await self.browser.click_captcha_checkbox()
        return "–ö–ª–∏–∫ –ø–æ –∫–∞–ø—á–∞-—á–µ–∫–±–æ–∫—Å—É"

    async def check_element_contains_text(self, selector: str, text: str) -> str:
        result = await self.browser.check_element_contains_text(selector, text)
        return f"–¢–µ–∫—Å—Ç {'–Ω–∞–π–¥–µ–Ω' if result else '–Ω–µ –Ω–∞–π–¥–µ–Ω'} –≤ {selector}"

    async def click_link_with_text(self, text: str) -> str:
        await self.browser.click_link_with_text(text)
        return f"–ö–ª–∏–∫ –ø–æ —Å—Å—ã–ª–∫–µ —Å —Ç–µ–∫—Å—Ç–æ–º: {text}"

    async def detect_captcha_type(self) -> Any:
        return await self.browser.detect_captcha_type()

    async def download_file(self, url: str) -> str:
        await self.browser.download_file(url)
        return f"–§–∞–π–ª —Å–∫–∞—á–∞–Ω —Å {url}"

    async def extract_emails_from_page(self) -> List[str]:
        return await self.browser.extract_emails_from_page()

    async def get_links_from_selector(self, selector: str) -> List[str]:
        return await self.browser.get_links_from_selector(selector)

    async def move_mouse(self, x: int, y: int) -> str:
        await self.browser.move_mouse(x, y)
        return f"–ú—ã—à—å –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã ({x}, {y})"

    async def press_enter(self) -> str:
        await self.browser.press_enter()
        return "–ù–∞–∂–∞–ª Enter"

    async def type_slow(self, selector: str, text: str, delay: float = 0.1) -> str:
        await self.browser.type_slow(selector, text, delay)
        return f"–ú–µ–¥–ª–µ–Ω–Ω–æ –≤–≤—ë–ª —Ç–µ–∫—Å—Ç '{text}' –≤ {selector}"

    # File and session management tasks
    def read_paths_from_file(self, params: Dict[str, Any]) -> Dict[str, Any]:
        filepath = params.get("file")
        count = params.get("count", None)

        if not filepath:
            raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É")

        with open(filepath, "r", encoding="utf-8") as f:
            lines = [line.strip() for line in f if line.strip()]

        if count:
            lines = lines[: int(count)]

        return {"status": "ok", "paths": lines}

    async def run_multiple_sessions_from_file(
        self, params: Dict[str, Any]
    ) -> Dict[str, Any]:
        filepath = params.get("file")
        count = params.get("count", 1)

        result = self.read_paths_from_file({"file": filepath, "count": count})
        paths = result["paths"]

        results = []
        for idx, path in enumerate(paths):
            session_result = await self.setup_octo_session_from_folder(
                {"folder_path": path, "profile_index": idx}
            )
            results.append(session_result)

        return {"status": "ok", "results": results}

    async def setup_octo_session_from_folder(
        self, params: Dict[str, Any]
    ) -> Dict[str, Any]:
        folder_path = params.get("folder_path")
        profile_index = params.get("profile_index", 0)

        print(f"üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Octo-–ø—Ä–æ—Ñ–∏–ª—è #{profile_index + 1} –∏–∑ –ø–∞–ø–∫–∏: {folder_path}")

        if not folder_path or not os.path.exists(folder_path):
            raise FileNotFoundError(f"–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {folder_path}")

        cookies_file = os.path.join(folder_path, "cookies.json")
        if not os.path.isfile(cookies_file):
            raise FileNotFoundError(f"–§–∞–π–ª cookies.json –Ω–µ –Ω–∞–π–¥–µ–Ω –≤: {folder_path}")

        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –∫—É–∫–∏: {cookies_file}")
        print(f"üöÄ –ü—Ä–æ—Ñ–∏–ª—å Octo #{profile_index + 1} —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")

        return {"status": "ok", "folder": folder_path, "profile": profile_index + 1}

    async def solve_best_captcha(self, params: Dict[str, Any]) -> Dict[str, Any]:
        user_id = params.get("user_id", "default")

        # Check if the user can use captcha service
        if not self.captcha_service.can_use_captcha(user_id):
            raise ValueError("üö´ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∫–∞–ø—á–∞-—Ä–µ—à–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

        path = "instance/api_keys/api_keys.json"
        with open(path, "r") as f:
            api_keys: Dict[str, str] = json.load(f)

        async with CaptchaSolver(self.browser.page) as solver:
            status = await solver.solve(api_keys=api_keys)
            if status:
                self.captcha_service.increment_user_usage(user_id)
                return {"status": "ok", "result": status}
            else:
                return {"status": "error", "result": None}

# import openai
import logging

from dotenv import load_dotenv

load_dotenv()
logger = logging.getLogger(__name__)


def ask_gpt_chain(command):
    # –≠–ø–∏—á–Ω–∞—è, –Ω–æ —Ä–∞–±–æ—á–∞—è —Ü–µ–ø–æ—á–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –¥–µ–º–æ
    response_content = {
        "task_chain": [
            {
                "action": "open_url",
                "params": {
                    "url": "https://demoqa.com/automation-practice-form",
                    "timeout": 30000,
                    "wait_until": "networkidle"
                },
                "description": "–û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"
            },
            {
                "action": "fill",
                "params": {
                    "selector": "#firstName",
                    "text": "–ò–≤–∞–Ω",
                    "timeout": 5000
                },
                "description": "–í–≤–æ–¥–∏–º —ç–ø–∏—á–Ω–æ–µ –∏–º—è"
            },
            {
                "action": "fill",
                "params": {
                    "selector": "#lastName",
                    "text": "–î—Ä–∞–∫–æ–Ω–æ–±–æ—Ä–µ—Ü",
                    "timeout": 5000
                },
                "description": "–í–≤–æ–¥–∏–º –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—É—é —Ñ–∞–º–∏–ª–∏—é"
            },
            {
                "action": "click",
                "params": {
                    "selector": "#gender-radio-1",
                    "timeout": 5000,
                    "force": True  # –ù–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –ø–µ—Ä–µ–∫—Ä—ã—Ç –¥—Ä—É–≥–∏–º
                },
                "description": "–í—ã–±–∏—Ä–∞–µ–º –ø–æ–ª (–¥–∞–∂–µ –µ—Å–ª–∏ —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–∫–∞ —Å–∫—Ä—ã—Ç–∞)"
            },
            {
                "action": "fill",
                "params": {
                    "selector": "#userNumber",
                    "text": "1234567890"
                },
                "description": "–í–≤–æ–¥–∏–º –º–∞–≥–∏—á–µ—Å–∫–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
            },
            {
                "action": "scroll",
                "params": {
                    "y": 500
                },
                "description": "–≠–ø–∏—á–Ω—ã–π —Å–∫—Ä–æ–ª–ª —Å—Ç—Ä–∞–Ω–∏—Ü—ã"
            },
            {
                "action": "click",
                "params": {
                    "selector": "#submit",
                    "timeout": 10000
                },
                "description": "–ì—Ä–∞–Ω–¥–∏–æ–∑–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ Submit!"
            },
            {
                "action": "screenshot",
                "params": {
                    "path": "demo_success.png",
                    "full_page": True
                },
                "description": "–°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ –Ω–∞—à–µ–≥–æ —Ç—Ä–∏—É–º—Ñ–∞"
            }
        ],
        "metadata": {
            "title": "–≠–ø–∏—á–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º—ã",
            "difficulty": "medium",
            "estimated_time": "45 —Å–µ–∫—É–Ω–¥"
        }
    }

    try:
        task_chain = response_content.get("task_chain", [])
        
        if not task_chain:
            raise ValueError("–ü—É—Å—Ç–∞—è —Ü–µ–ø–æ—á–∫–∞ –∑–∞–¥–∞—á")
            
        # –õ–æ–≥–∏—Ä—É–µ–º —ç–ø–∏—á–Ω–æ–µ –Ω–∞—á–∞–ª–æ
        logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –≠–ü–ò–ß–ù–£–Æ —Ü–µ–ø–æ—á–∫—É –∑–∞–¥–∞—á!")
        logger.info(f"üìõ –ú–∏—Å—Å–∏—è: {response_content['metadata']['title']}")
        logger.info(f"‚è± –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {response_content['metadata']['estimated_time']}")
        
        return task_chain

    except Exception as e:
        logger.error(f"‚ö° –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ü–µ–ø–æ—á–∫–∏: {str(e)}")
        raise Exception(f"üí• –ú–∏—Å—Å–∏—è –ø—Ä–æ–≤–∞–ª–µ–Ω–∞: {str(e)}")